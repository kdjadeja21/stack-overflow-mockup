{"version":3,"sources":["components/profile/Profile.js","../node_modules/@material-ui/core/esm/Typography/Typography.js","../node_modules/@material-ui/core/esm/Link/Link.js"],"names":["convertTimestamp","timestamp","d","Date","yyyy","getFullYear","mm","getMonth","slice","dd","getDate","hh","getHours","h","ampm","getMinutes","Profile","dispatch","useDispatch","routeParams","useParams","user","useSelector","state","profile","useEffect","getUser","getUserTags","getUserQuestions","className","userData","items","map","userItem","src","profile_image","alt","account_id","variant","reputation","style","fontSize","badge_counts","display_name","userTags","tag","name","userQuestions","questionItem","score","answer_count","view_count","bounty_amount","href","link","title","tags","is_answered","last_activity_date","owner","question_id","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","Typography","React","props","ref","_props$align","align","classes","_props$color","color","component","_props$display","display","_props$gutterBottom","gutterBottom","_props$noWrap","noWrap","_props$paragraph","paragraph","_props$variant","_props$variantMapping","variantMapping","other","_objectWithoutProperties","Component","_extends","clsx","root","concat","capitalize","withStyles","theme","margin","typography","caption","button","overline","srOnly","position","height","width","overflow","alignLeft","textAlign","alignCenter","alignRight","alignJustify","textOverflow","whiteSpace","marginBottom","colorInherit","colorPrimary","palette","primary","main","colorSecondary","secondary","colorTextPrimary","text","colorTextSecondary","colorError","error","displayInline","displayBlock","Link","_props$component","onBlur","onFocus","TypographyClasses","_props$underline","underline","_useIsFocusVisible","useIsFocusVisible","isFocusVisible","onBlurVisible","focusVisibleRef","_React$useState","focusVisible","setFocusVisible","handlerRef","useForkRef","event","underlineNone","textDecoration","underlineHover","underlineAlways","WebkitTapHighlightColor","backgroundColor","outline","border","borderRadius","padding","cursor","userSelect","verticalAlign","borderStyle"],"mappings":"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","file":"static/js/6.f1188d4e.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Typography, Card, Link } from '@material-ui/core';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getUser, getUserTags, getUserQuestions } from './store/actions';\r\n\r\nexport function convertTimestamp(timestamp) {\r\n    var d = new Date(timestamp * 1000), // Convert the passed timestamp to milliseconds\r\n        yyyy = d.getFullYear(),\r\n        mm = ('0' + (d.getMonth() + 1)).slice(-2),  // Months are zero based. Add leading 0.\r\n        dd = ('0' + d.getDate()).slice(-2),         // Add leading 0.\r\n        hh = d.getHours(),\r\n        h = hh,\r\n        min = ('0' + d.getMinutes()).slice(-2),     // Add leading 0.\r\n        ampm = 'AM',\r\n        time;\r\n\r\n    if (hh > 12) {\r\n        h = hh - 12;\r\n        ampm = 'PM';\r\n    } else if (hh === 12) {\r\n        h = 12;\r\n        ampm = 'PM';\r\n    } else if (hh === 0) {\r\n        h = 12;\r\n    }\r\n\r\n    // ie: 2014-03-24, 3:00 PM\r\n    time = yyyy + '-' + mm + '-' + dd + ', ' + h + ':' + min + ' ' + ampm;\r\n    return time;\r\n}\r\n\r\nconst Profile = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const routeParams = useParams();\r\n    const user = useSelector(state => state.profile.user);\r\n\r\n    useEffect(() => {\r\n        dispatch(getUser(routeParams))\r\n        dispatch(getUserTags(routeParams))\r\n        dispatch(getUserQuestions(routeParams))\r\n    }, [dispatch, routeParams])\r\n\r\n    return (\r\n        <div>\r\n            <div className='profile'>\r\n                {\r\n                    user.userData && user.userData.items.map(userItem => (\r\n                        <>\r\n                            <div key={userItem.account_id} className='flex flex-row'>\r\n                                <Card key={userItem.account_id} className='user-card'>\r\n                                    <img src={userItem.profile_image} alt={userItem.account_id} /><br />\r\n                                    <Typography variant='h6'>{userItem.reputation} <span style={{ fontSize: '13px' }}>REPUTATION</span></Typography>\r\n\r\n                                    <span className='gold-badge'>{userItem.badge_counts['gold']}</span>\r\n                                    <span className='silver-badge'>{userItem.badge_counts['silver']}</span>\r\n                                    <span className='bronze-badge'>{userItem.badge_counts['bronze']}</span>\r\n\r\n                                </Card>\r\n                                <div className='ml-1'>\r\n                                    <Typography variant='h5'>{userItem.display_name}</Typography>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                user.userTags && user.userTags.items.map(tag => (\r\n                    <>\r\n                        <span className='user-tag'>\r\n                            {tag.name}\r\n                        </span>\r\n                    </>\r\n                ))\r\n            }\r\n\r\n            {\r\n                user.userQuestions && user.userQuestions.items.map(questionItem => (\r\n                    <>\r\n                        <Card key={questionItem.question_id} className='questionCard'>\r\n\r\n                            <Typography>\r\n                                <span className='flex flex-row item-center justify-center'>\r\n                                    <span className='flex flex-column ml-5'>\r\n                                        <span className='votes'>\r\n                                            {questionItem.score}\r\n                                        </span> <span>votes</span>\r\n                                    </span>\r\n                                    <span className='flex flex-column ml-5'>\r\n                                        <span className='answers'>\r\n                                            {questionItem.answer_count}\r\n                                        </span> <span>answers</span>\r\n                                    </span>\r\n                                    <span className='flex flex-column ml-5'>\r\n                                        <span className='views'>\r\n                                            {questionItem.view_count}\r\n                                        </span> <span>views</span>\r\n                                    </span>\r\n\r\n                                    <span className=\"bounty\">{questionItem.bounty_amount && '+' + questionItem.bounty_amount}</span>\r\n\r\n                                    <Link className=\"no-underline\" href={questionItem.link}>{questionItem.title}</Link>\r\n                                </span>\r\n                            </Typography><br />\r\n                            {\r\n                                questionItem.tags.map(tag => (\r\n                                    <span key={tag} className=\"questionTags\">{tag}</span>\r\n                                ))\r\n                            }\r\n                            <span>{(questionItem.is_answered ? 'answered ' : 'modified ') +\r\n                                convertTimestamp(questionItem.last_activity_date) + \" \"}\r\n                                <Link\r\n                                    className=\"no-underline\"\r\n                                    href={\"/user-profile/\" + questionItem.owner['user_id']}\r\n                                >\r\n                                    {questionItem.owner['display_name']}\r\n                                </Link></span>\r\n                        </Card>\r\n                    </>\r\n                ))\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nvar Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  var _useIsFocusVisible = useIsFocusVisible(),\n      isFocusVisible = _useIsFocusVisible.isFocusVisible,\n      onBlurVisible = _useIsFocusVisible.onBlurVisible,\n      focusVisibleRef = _useIsFocusVisible.ref;\n\n  var _React$useState = React.useState(false),\n      focusVisible = _React$useState[0],\n      setFocusVisible = _React$useState[1];\n\n  var handlerRef = useForkRef(ref, focusVisibleRef);\n\n  var handleBlur = function handleBlur(event) {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    className: clsx(classes.root, classes[\"underline\".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);"],"sourceRoot":""}